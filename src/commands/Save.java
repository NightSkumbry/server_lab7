package commands;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import connections.PrintType;
import connections.Request;
import connections.RequestType;
import connections.Response;
import connections.ResponseType;
import controls.CollectionControl;
import controls.CommandControl;
import models.Flat;
import util.LocalDateAdapter;

/**
 * The Save class implements the {@link ICommand} interface and provides functionality
 * to save the current state of the collection to a file in JSON format.
 * <p>
 * The file name is obtained from the environment variable "collection_file".
 * The class ensures proper serialization of the collection using Gson, including
 * handling of special data types such as {@link LocalDate}.
 */
public class Save implements ICommand{

    /**
     * The unique identifier of the command.
     */
    private int id;

    /**
     * The {@link CommandControl} instance for managing command-related operations.
     */
    private CommandControl commandControl;

    /**
     * The {@link CollectionControl} instance for managing the collection of flats.
     */
    private CollectionControl collectionControl;

    /**
     * The last {@link Response} generated during the command execution.
     */
    private Response lastResponse;


    /**
     * Constructs a new Save command.
     *
     * @param id               The unique identifier for this command.
     * @param arguments        The arguments provided for the command (not used).
     * @param commandControl   The {@link CommandControl} instance for managing commands.
     * @param collectionControl The {@link CollectionControl} instance for managing the collection.
     */
    public Save(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl) {
        super();
        
        this.id = id;
        this.commandControl = commandControl;
        this.collectionControl = collectionControl;
        proceedRequest(new Request(id, RequestType.EXECUTE_COMMAND, arguments));
    }


    /**
     * Returns the unique identifier of the command.
     *
     * @return The command ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Returns the {@link CommandControl} instance associated with this command.
     *
     * @return The {@link CommandControl} instance.
     */
    public CommandControl getCommandControl() {
        return commandControl;
    }

    /**
     * Returns the {@link CollectionControl} instance associated with this command.
     *
     * @return The {@link CollectionControl} instance.
     */
    public CollectionControl getCollectionControl() {
        return collectionControl;
    }

    /**
     * Returns the last {@link Response} generated by this command.
     *
     * @return The last {@link Response}.
     */
    public Response getLastResponse() {
        return lastResponse;
    }


    /**
     * Executes the command to save the collection to a file. The collection is serialized
     * into JSON format using Gson. If the environment variable "collection_file" is missing
     * or file access fails, appropriate error responses are returned.
     *
     * @param request The {@link Request} object containing the command details.
     * @return A {@link Response} indicating the result of the save operation.
     */
    private Response executeCommand(Request request) {
        String collectionFile = System.getenv("collection_file");
        if (collectionFile == null) return new Response(getId(), ResponseType.SUCCESS, PrintType.ERROR, "Имя файла коллекции должно быть в переменной окружения \"collection_file\", коллекция не сохранена.");

        Gson gson = new GsonBuilder().registerTypeAdapter(LocalDate.class, new LocalDateAdapter()).create();

        String json = gson.toJson(new ArrayList<Flat>(collectionControl.getCollection()));

        File file = new File(collectionFile);
        if (!file.exists()) {
            return new Response(getId(), ResponseType.SUCCESS, PrintType.ERROR, "Файл не найден, коллекция не сохранена.");
        }
        else if (!file.canRead()) {
            return new Response(getId(), ResponseType.SUCCESS, PrintType.ERROR, "Отсутствует доступ к файлу, коллекция не сохранена.");
        }
        else {
            try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(collectionFile))) {
                bos.write(json.getBytes());
                collectionControl.updateLastSaveTime();
                return new Response(getId(), ResponseType.SUCCESS, PrintType.LINE, "Файл успешно сохранён.");
            }
            catch (FileNotFoundException e) {
                return new Response(getId(), ResponseType.SUCCESS, PrintType.ERROR, "Файл не найден, коллекция не сохранена.");
            }
            catch (IOException er) {
                return new Response(getId(), ResponseType.SUCCESS, PrintType.ERROR, "Неизвестная ошибка, коллекция не сохранена.");
            }
        }
        
    }

    /**
     * Processes the provided request and delegates it to the appropriate command handler.
     *
     * @param request The {@link Request} to be processed.
     * @return A {@link Response} representing the outcome of the request processing.
     */
    @Override
    public Response proceedRequest(Request request) {
        if (request.getType() == RequestType.EXECUTE_COMMAND) {
            lastResponse = executeCommand(request);
            return lastResponse;
        }

        return new Response(getId(), ResponseType.SUCCESS, PrintType.WARNING, "Not correct request type");
    }


    /**
     * The Factory class provides methods to create instances of the Save command
     * and describe its functionality.
     */
    public static class Factory implements ICommandFactory {

        /**
         * Creates a new instance of the Save command.
         *
         * @param id               The unique identifier for the command.
         * @param arguments        The arguments provided for the command (not used).
         * @param commandControl   The {@link CommandControl} instance for managing commands.
         * @param collectionControl The {@link CollectionControl} instance for managing the collection.
         * @return A new instance of the Save command.
         */
        @Override
        public ICommand create(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl, Request request) {
            return new Save(id, arguments, commandControl, collectionControl);
        }

        /**
         * Returns a brief description of the Save command.
         *
         * @return A short description of the command functionality.
         */
        @Override
        public String getDescription() {
            return "save: Сохранить коллекцию в файл";
        }

        /**
         * Returns an extended description of the Save command.
         *
         * @return A detailed description of the command functionality.
         */
        @Override
        public String getExtendedDescription() {
            return "save: Сохранить коллекцию в файл.";
        }
    }
}
