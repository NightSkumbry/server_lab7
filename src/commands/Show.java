package commands;

import connections.PrintType;
import connections.Request;
import connections.RequestType;
import connections.Response;
import connections.ResponseType;
import connections.ServerRequest;
import connections.ServerResponse;
import controls.CollectionControl;
import controls.CommandControl;
import models.Flat;
import util.ArgumentTypeConverter;
import util.StringWrapper;

/**
 * The Show class implements the {@link ICommand} interface and provides functionality
 * to display all flats in the collection in string representation or retrieve details
 * of a specific flat by its ID.
 */
public class Show implements ICommand{

    /**
     * The unique identifier of the command.
     */
    private int id;

    /**
     * The {@link CommandControl} instance for managing command-related operations.
     */
    private CommandControl commandControl;

    /**
     * The {@link CollectionControl} instance for managing the collection of flats.
     */
    private CollectionControl collectionControl;

    /**
     * The last {@link Response} generated during the command execution.
     */
    private Response lastResponse;


    /**
     * Constructs a new Show command.
     *
     * @param id               The unique identifier for this command.
     * @param arguments        The initial arguments provided to the command. Can specify an ID (optional).
     * @param commandControl   The {@link CommandControl} instance for managing commands.
     * @param collectionControl The {@link CollectionControl} instance for managing the collection.
     */
    public Show(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl) {
        super();
        
        this.id = id;
        this.commandControl = commandControl;
        this.collectionControl = collectionControl;
        proceedRequest(new Request(id, RequestType.EXECUTE_COMMAND, arguments));
    }


    /**
     * Returns the unique identifier of the command.
     *
     * @return The command ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Returns the {@link CommandControl} instance associated with this command.
     *
     * @return The {@link CommandControl} instance.
     */
    public CommandControl getCommandControl() {
        return commandControl;
    }

    /**
     * Returns the {@link CollectionControl} instance associated with this command.
     *
     * @return The {@link CollectionControl} instance.
     */
    public CollectionControl getCollectionControl() {
        return collectionControl;
    }

    /**
     * Returns the last {@link Response} generated by this command.
     *
     * @return The last {@link Response}.
     */
    public Response getLastResponse() {
        return lastResponse;
    }


    /**
     * Executes the command to either display all flats in the collection or 
     * retrieve details of a specific flat by ID.
     * <p>
     * If no content is provided, a string representation of all flats is returned.
     * If an ID is provided, the flat corresponding to that ID is returned.
     * If the ID is invalid or not found, an error response is returned.
     *
     * @param request The {@link Request} object containing the command details.
     * @return A {@link Response} representing the result of the command execution.
     */
    private Response executeCommand(Request request) {
        if (request instanceof ServerRequest) {
            ServerRequest req = (ServerRequest) request;
            
            return new ServerResponse(req.getClientCommandId(), ResponseType.SUCCESS, PrintType.LINE, new StringWrapper(collectionControl.toString()), req.getClientId());
        }

        if (request.getContent() == null) return new Response(getId(), ResponseType.SUCCESS, PrintType.LINE, collectionControl.toString());
        try {
            Long id =  ArgumentTypeConverter.getLong(request.getContent());
            Flat flat = collectionControl.getById(id);
            if (flat == null) return new Response(getId(), ResponseType.INVALID_ARGUMENT, PrintType.ERROR, "Не существует квартиры с id " + id + ".");
            return new Response(getId(), ResponseType.SUCCESS, PrintType.LINE, flat.toString());
        }
        catch (NumberFormatException e) {
            return new Response(getId(), ResponseType.INVALID_ARGUMENT, PrintType.ERROR, "Неверный формат id");
        }
    }

    /**
     * Processes the provided request and delegates it to the appropriate command handler.
     *
     * @param request The {@link Request} to be processed.
     * @return A {@link Response} representing the outcome of the request processing.
     */
    @Override
    public Response proceedRequest(Request request) {
        if (request.getType() == RequestType.EXECUTE_COMMAND) {
            lastResponse = executeCommand(request);
            return lastResponse;
        }

        return new Response(getId(), ResponseType.SUCCESS, PrintType.WARNING, "Not correct request type");
    }


    /**
     * The Factory class provides methods to create instances of the Show command
     * and describe its functionality.
     */
    public static class Factory implements ICommandFactory {

        /**
         * Creates a new instance of the Show command.
         *
         * @param id               The unique identifier for the command.
         * @param arguments        The initial arguments for the command. Can specify an ID (optional).
         * @param commandControl   The {@link CommandControl} instance for managing commands.
         * @param collectionControl The {@link CollectionControl} instance for managing the collection.
         * @return A new instance of the Show command.
         */
        @Override
        public ICommand create(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl, Request request) {
            return new Show(id, arguments, commandControl, collectionControl);
        }

        /**
         * Returns a brief description of the Show command.
         *
         * @return A short description of the command functionality.
         */
        @Override
        public String getDescription() {
            return "show [id]: вывести все квартиры коллекции в строковом представлении";
        }

        /**
         * Returns an extended description of the Show command, explaining its behavior in detail.
         *
         * @return A detailed description of the command functionality.
         */
        @Override
        public String getExtendedDescription() {
            return "show: вывести все квартиры коллекции в строковом представлении.\nshow id: вывести квартиру, id которой равен id.";
        }
    }
}
