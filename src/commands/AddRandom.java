package commands;

import connections.PrintType;
import connections.Request;
import connections.RequestType;
import connections.Response;
import connections.ResponseType;
import connections.ServerRequest;
import connections.ServerResponse;
import controls.CollectionControl;
import controls.CommandControl;
import controls.flat_builder.FlatBuilderRandom;
import controls.flat_builder.IBuilder;
import models.Flat;
import util.StringWrapper;

/**
 * The AddRandom class implements the {@link ICommand} interface and provides functionality
 * for adding a new flat to the collection, where all the flat's attributes are generated
 * with random values.
 */
public class AddRandom implements ICommand{

    /**
     * The unique identifier of the command.
     */
    private int id;

    /**
     * The {@link CommandControl} instance for managing command-related operations.
     */
    private CommandControl commandControl;

    /**
     * The {@link CollectionControl} instance for managing the collection of flats.
     */
    private CollectionControl collectionControl;

    /**
     * The last {@link Response} generated during the command execution.
     */
    private Response lastResponse;

    /**
     * The {@link IBuilder} instance responsible for constructing {@link Flat} objects with random values.
     */
    private IBuilder builder;

    /**
     * Constructs a new AddRandom command.
     *
     * @param id               The unique identifier for this command.
     * @param arguments        The initial arguments provided to the command.
     * @param commandControl   The {@link CommandControl} instance for managing commands.
     * @param collectionControl The {@link CollectionControl} instance for managing the collection.
     */
    public AddRandom(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl, Request request) {
        super();
        
        this.id = id;
        this.commandControl = commandControl;
        this.collectionControl = collectionControl;
        builder = new FlatBuilderRandom(collectionControl);
        proceedRequest(request);
    }


    /**
     * Returns the unique identifier of the command.
     *
     * @return The command ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Returns the {@link CommandControl} instance associated with this command.
     *
     * @return The {@link CommandControl} instance.
     */
    public CommandControl getCommandControl() {
        return commandControl;
    }

    /**
     * Returns the {@link CollectionControl} instance associated with this command.
     *
     * @return The {@link CollectionControl} instance.
     */
    public CollectionControl getCollectionControl() {
        return collectionControl;
    }

    /**
     * Returns the last {@link Response} generated by this command.
     *
     * @return The last {@link Response}.
     */
    public Response getLastResponse() {
        return lastResponse;
    }


    /**
     * Executes the command by creating a flat with random values and adding it to the collection.
     *
     * @param request The {@link Request} object containing the command details.
     * @return A {@link Response} indicating the success of the operation and including the details
     *         of the newly added flat.
     */
    private Response executeCommand(Request request) {
        Flat flat = builder.build();
        if (request instanceof ServerRequest) {
            ServerRequest req = (ServerRequest) request;
            if (collectionControl.add(flat, req.getUser().getName())) return new ServerResponse(req.getClientCommandId(), ResponseType.SUCCESS, PrintType.LINE, flat, req.getClientId());
                else return new ServerResponse(req.getClientCommandId(), ResponseType.VALIDATION_FAILURE, PrintType.LINE, new StringWrapper(""), req.getClientId());
        }
        else if (collectionControl.add(flat, "ADMIN")) return new Response(getId(), ResponseType.SUCCESS, PrintType.LINE, "Квартира успешно добавлена:\n" + flat.toString());
        else return new Response(getId(), ResponseType.VALIDATION_FAILURE, PrintType.LINE, "Не удалось добавить квартиру");
    }
        
    /**
     * Processes the given request and delegates it to the appropriate command handler.
     *
     * @param request The {@link Request} to be processed.
     * @return A {@link Response} representing the outcome of the request processing.
     */
    @Override
    public Response proceedRequest(Request request) {
        if (request.getType() == RequestType.EXECUTE_COMMAND || request.getType() == RequestType.PROCEED_COMMAND) {
            lastResponse = executeCommand(request);
            return lastResponse;
        }

        return new Response(getId(), ResponseType.SUCCESS, PrintType.WARNING, "Not correct request type");
    }


    /**
     * The Factory class provides methods to create instances of the AddRandom command
     * and describe its functionality.
     */
    public static class Factory implements ICommandFactory {

        /**
         * Creates a new instance of the AddRandom command.
         *
         * @param id               The unique identifier for the command.
         * @param arguments        The initial arguments provided to the command.
         * @param commandControl   The {@link CommandControl} instance for managing commands.
         * @param collectionControl The {@link CollectionControl} instance for managing the collection.
         * @return A new instance of the AddRandom command.
         */
        @Override
        public ICommand create(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl, Request request) {
            return new AddRandom(id, arguments, commandControl, collectionControl, request);
        }

        /**
         * Returns a brief description of the AddRandom command.
         *
         * @return A short description of the command functionality.
         */
        @Override
        public String getDescription() {
            return "add_random: добавить в коллекцию новую квартиру, заполненную случайными значениями";
        }

        /**
         * Returns an extended description of the AddRandom command, detailing its purpose.
         *
         * @return A detailed description of the command functionality.
         */
        @Override
        public String getExtendedDescription() {
            return "add_random: добавить в коллекцию новую квартиру, заполненную случайными значениями.";
        }
    }
}
