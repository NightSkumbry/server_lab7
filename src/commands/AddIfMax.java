package commands;

import connections.PrintType;
import connections.Request;
import connections.RequestType;
import connections.Response;
import connections.ResponseType;
import connections.ServerRequest;
import connections.ServerResponse;
import controls.CollectionControl;
import controls.CommandControl;
import controls.flat_builder.FlatBuilderAdd;
import controls.flat_builder.IBuilder;
import models.Flat;
import util.StringWrapper;

/**
 * The AddIfMax class implements the {@link ICommand} interface and provides functionality
 * to add a new flat to the collection only if its area is greater than the area of the
 * largest flat currently in the collection.
 */
public class AddIfMax implements ICommand{

    /**
     * The unique identifier of the command.
     */
    private int id;

    /**
     * The unique identifier of the command.
     */
    private CommandControl commandControl;

    /**
     * The {@link CollectionControl} instance for managing the collection of flats.
     */
    private CollectionControl collectionControl;

    /**
     * The last {@link Response} generated during the command execution.
     */
    private Response lastResponse;

    /**
     * The {@link IBuilder} instance used for constructing {@link Flat} objects.
     */
    private IBuilder builder;

    /**
     * Constructs a new AddIfMax command.
     *
     * @param id               The unique identifier for this command.
     * @param arguments        The initial arguments provided to the command.
     * @param commandControl   The {@link CommandControl} instance for managing commands.
     * @param collectionControl The {@link CollectionControl} instance for managing the collection.
     */
    public AddIfMax(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl) {
        super();
        
        this.id = id;
        this.commandControl = commandControl;
        this.collectionControl = collectionControl;
        builder = new FlatBuilderAdd(collectionControl);
        proceedRequest(new Request(id, RequestType.EXECUTE_COMMAND, arguments));
    }


    /**
     * Returns the unique identifier of the command.
     *
     * @return The command ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Returns the {@link CommandControl} instance associated with this command.
     *
     * @return The {@link CommandControl} instance.
     */
    public CommandControl getCommandControl() {
        return commandControl;
    }

    /**
     * Returns the {@link CollectionControl} instance associated with this command.
     *
     * @return The {@link CollectionControl} instance.
     */
    public CollectionControl getCollectionControl() {
        return collectionControl;
    }

    /**
     * Returns the last {@link Response} generated by this command.
     *
     * @return The last {@link Response}.
     */
    public Response getLastResponse() {
        return lastResponse;
    }


    /**
     * Executes the command by processing the given {@link Request}.
     * If the area of the flat being added is greater than the maximum area
     * in the collection, the flat is added; otherwise, a warning is returned.
     *
     * @param request The {@link Request} object containing the command details.
     * @return A {@link Response} representing the result of command execution.
     */
    private Response executeCommand(Request request) {
        if (request instanceof ServerRequest) {
            ServerRequest req = (ServerRequest) request;
            builder = (IBuilder) req.getContentExt();
            builder.setCollection(collectionControl);
            Flat flat = builder.build();
            if (collectionControl.willBeMax(flat)) {
                if (collectionControl.add(flat, req.getUser().getName())) return new ServerResponse(req.getClientCommandId(), ResponseType.SUCCESS, PrintType.LINE, flat, req.getClientId());
                else return new ServerResponse(req.getClientCommandId(), ResponseType.VALIDATION_FAILURE, PrintType.LINE, new StringWrapper(""), req.getClientId());

            }
            return new ServerResponse(req.getClientCommandId(), ResponseType.INVALID_ARGUMENT, PrintType.WARNING, flat, req.getClientId());
        }

        if (request.getType() == RequestType.EXECUTE_COMMAND) {
            return new Response(getId(), ResponseType.REQUEST_VALUES, PrintType.LINE, "Начало добавления квартиры", builder.getPrompt());
        }
        
        Response resp = builder.setValue(request.getContent());
        String prompt = builder.getPrompt();
        if (resp.getType() == ResponseType.SUCCESS) {
            if (prompt != null) return new Response(getId(), ResponseType.REQUEST_VALUES, PrintType.NONE, resp.getContent(), prompt);
            else {
                Flat flat = builder.build();
                if (collectionControl.willBeMax(flat)) {
                    if (collectionControl.add(flat, "ADMIN")) return new Response(getId(), ResponseType.SUCCESS, PrintType.LINE, "Квартира успешно добавлена:\n" + flat.toString());
                    else return new Response(getId(), ResponseType.VALIDATION_FAILURE, PrintType.LINE, "Не удалось добавить квартиру");
                }
                return new Response(getId(), ResponseType.INVALID_ARGUMENT, PrintType.WARNING, "Создать квартиру не удалось, она не будет максимальной");
            }
        }
        return new Response(getId(), resp.getType(), resp.getPrintType(), resp.getContent(), prompt);
    }

    /**
     * Processes the given request and delegates it to the appropriate command handler.
     *
     * @param request The {@link Request} to be processed.
     * @return A {@link Response} representing the outcome of the request processing.
     */
    @Override
    public Response proceedRequest(Request request) {
        if (request.getType() == RequestType.EXECUTE_COMMAND || request.getType() == RequestType.PROCEED_COMMAND) {
            lastResponse = executeCommand(request);
            return lastResponse;
        }

        return new Response(getId(), ResponseType.SUCCESS, PrintType.WARNING, "Not correct request type");
    }


    /**
     * The Factory class provides methods to create instances of the AddIfMax command
     * and describe its functionality.
     */
    public static class Factory implements ICommandFactory {

        /**
         * Creates a new instance of the AddIfMax command.
         *
         * @param id               The unique identifier for the command.
         * @param arguments        The initial arguments provided to the command.
         * @param commandControl   The {@link CommandControl} instance for managing commands.
         * @param collectionControl The {@link CollectionControl} instance for managing the collection.
         * @return A new instance of the AddIfMax command.
         */
        @Override
        public ICommand create(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl, Request request) {
            return new AddIfMax(id, arguments, commandControl, collectionControl);
        }

        /**
         * Returns a brief description of the AddIfMax command.
         *
         * @return A short description of the command functionality.
         */
        @Override
        public String getDescription() {
            return "add_if_max {flat}: добавить новую квартиру в коллекцию, если её площадь превышает наибольшую из площадей имеющихся квартир";
        }

        /**
         * Returns an extended description of the AddIfMax command, detailing its input requirements.
         *
         * @return A detailed description of the command functionality.
         */
        @Override        
        public String getExtendedDescription() {
            return "add_if_max {flat}: добавить новую квартиру в коллекцию, если её площадь превышает наибольшую из площадей имеющихся квартир.\nНеобходимые значения для flat будут запрошены в последующих строчках.";
        }
    }
}
