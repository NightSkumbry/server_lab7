package commands;

import connections.PrintType;
import connections.Request;
import connections.RequestType;
import connections.Response;
import connections.ResponseType;
import connections.ServerRequest;
import connections.ServerResponse;
import controls.CollectionControl;
import controls.CommandControl;
import util.StringWrapper;

/**
 * The PrintDescending class implements the {@link ICommand} interface and provides functionality
 * to display the flats in the collection in descending order by their area.
 */
public class PrintDescending implements ICommand{

    /**
     * The unique identifier of the command.
     */
    private int id;

    /**
     * The {@link CommandControl} instance for managing command-related operations.
     */
    private CommandControl commandControl;

    /**
     * The {@link CollectionControl} instance for managing the collection of flats.
     */
    private CollectionControl collectionControl;

    /**
     * The last {@link Response} generated during the command execution.
     */
    private Response lastResponse;


    /**
     * Constructs a new PrintDescending command.
     *
     * @param id               The unique identifier for this command.
     * @param arguments        The initial arguments provided to the command (not used).
     * @param commandControl   The {@link CommandControl} instance for managing commands.
     * @param collectionControl The {@link CollectionControl} instance for managing the collection.
     */
    public PrintDescending(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl) {
        super();
        
        this.id = id;
        this.commandControl = commandControl;
        this.collectionControl = collectionControl;
        proceedRequest(new Request(id, RequestType.EXECUTE_COMMAND, arguments));
    }


    /**
     * Returns the unique identifier of the command.
     *
     * @return The command ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Returns the {@link CommandControl} instance associated with this command.
     *
     * @return The {@link CommandControl} instance.
     */
    public CommandControl getCommandControl() {
        return commandControl;
    }

    /**
     * Returns the {@link CollectionControl} instance associated with this command.
     *
     * @return The {@link CollectionControl} instance.
     */
    public CollectionControl getCollectionControl() {
        return collectionControl;
    }

    /**
     * Returns the last {@link Response} generated by this command.
     *
     * @return The last {@link Response}.
     */
    public Response getLastResponse() {
        return lastResponse;
    }


    /**
     * Executes the command by generating a string representation of the flats
     * in the collection, ordered in descending order by their area.
     *
     * @param request The {@link Request} object containing the command details.
     * @return A {@link Response} containing the string representation of the flats in descending order.
     */
    private Response executeCommand(Request request) {
        if (request instanceof ServerRequest) {
            ServerRequest req = (ServerRequest) request;
            return new ServerResponse(req.getClientCommandId(), ResponseType.SUCCESS, PrintType.LINE, new StringWrapper(collectionControl.toDescendingString()), req.getClientId());
        }
        return new Response(getId(), ResponseType.SUCCESS, PrintType.LINE, collectionControl.toDescendingString());
    }

    /**
     * Processes the provided request and delegates it to the appropriate command handler.
     *
     * @param request The {@link Request} to be processed.
     * @return A {@link Response} representing the outcome of the request processing.
     */
    @Override
    public Response proceedRequest(Request request) {
        if (request.getType() == RequestType.EXECUTE_COMMAND) {
            lastResponse = executeCommand(request);
            return lastResponse;
        }

        return new Response(getId(), ResponseType.SUCCESS, PrintType.WARNING, "Not correct request type");
    }


    /**
     * The Factory class provides methods to create instances of the PrintDescending command
     * and describe its functionality.
     */
    public static class Factory implements ICommandFactory {

        /**
         * Creates a new instance of the PrintDescending command.
         *
         * @param id               The unique identifier for the command.
         * @param arguments        The initial arguments provided to the command.
         * @param commandControl   The {@link CommandControl} instance for managing commands.
         * @param collectionControl The {@link CollectionControl} instance for managing the collection.
         * @return A new instance of the PrintDescending command.
         */
        @Override
        public ICommand create(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl, Request request) {
            return new PrintDescending(id, arguments, commandControl, collectionControl);
        }

        /**
         * Returns a brief description of the PrintDescending command.
         *
         * @return A short description of the command functionality.
         */
        @Override
        public String getDescription() {
            return "print_descending: вывести квартиры коллекции в порядке убывания их площади";
        }

        /**
         * Returns an extended description of the PrintDescending command, detailing its behavior.
         *
         * @return A detailed description of the command functionality.
         */
        @Override
        public String getExtendedDescription() {
            return "print_descending: вывести квартиры коллекции в порядке убывания их площади.";
        }
    }
}
