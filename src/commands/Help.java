package commands;

import connections.PrintType;
import connections.Request;
import connections.RequestType;
import connections.Response;
import connections.ResponseType;
import controls.CollectionControl;
import controls.CommandControl;
import exceptions.UnknownCommandException;

/**
 * The Help class implements the {@link ICommand} interface and provides functionality
 * to display information about available commands. It can either list all commands
 * with brief descriptions or show detailed information about a specific command.
 */
public class Help implements ICommand{

    /**
     * The unique identifier of the command.
     */
    private int id;

    /**
     * The {@link CommandControl} instance for managing command-related operations.
     */
    private CommandControl commandControl;

    /**
     * The {@link CollectionControl} instance for managing the collection (unused in this command).
     */
    private CollectionControl collectionControl;

    /**
     * The last {@link Response} generated during the command execution.
     */
    private Response lastResponse;


    /**
     * Constructs a new Help command.
     *
     * @param id               The unique identifier for this command.
     * @param arguments        The initial arguments provided to the command, specifying the command name (optional).
     * @param commandControl   The {@link CommandControl} instance for managing commands.
     * @param collectionControl The {@link CollectionControl} instance (unused in this implementation).
     */
    public Help(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl) {
        super();
        
        this.id = id;
        this.commandControl = commandControl;
        this.collectionControl = collectionControl;
        proceedRequest(new Request(id, RequestType.EXECUTE_COMMAND, arguments));
    }


    /**
     * Returns the unique identifier of the command.
     *
     * @return The command ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Returns the {@link CommandControl} instance associated with this command.
     *
     * @return The {@link CommandControl} instance.
     */
    public CommandControl getCommandControl() {
        return commandControl;
    }

    /**
     * Returns the {@link CollectionControl} instance associated with this command.
     *
     * @return The {@link CollectionControl} instance.
     */
    public CollectionControl getCollectionControl() {
        return collectionControl;
    }

    /**
     * Returns the last {@link Response} generated by this command.
     *
     * @return The last {@link Response}.
     */
    public Response getLastResponse() {
        return lastResponse;
    }


    /**
     * Executes the command by processing the given {@link Request}.
     * If no command name is specified, it returns a list of all available commands.
     * If a specific command name is provided, it returns detailed information about that command.
     *
     * @param request The {@link Request} object containing the command details.
     * @return A {@link Response} object with either general or specific command information.
     */
    private Response executeCommand(Request request) {
        if (request.getContent() == null) {
            String result = "Краткая информация о существующих командах:\n";
            for (String name : getCommandControl().getCommandNameSet()) {
                result += getCommandControl().getCommandDescription(name) + ";\n";
            }
            
            return new Response(getId(), ResponseType.SUCCESS, PrintType.LINE, result);
        }
        String command = request.getContent();
        try {
            String description = getCommandControl().getCommandExtendedDescription(command);
            return new Response(getId(), ResponseType.SUCCESS, PrintType.LINE, "Информация по команде " + command + ":\n\n" + description);

        }
        catch (UnknownCommandException e) {
            return new Response(getId(), ResponseType.INVALID_ARGUMENT, PrintType.ERROR, "Не существует команды \"" + command + "\"");
        }
    }

    /**
     * Processes the provided request and delegates it to the appropriate command handler.
     *
     * @param request The {@link Request} to be processed.
     * @return A {@link Response} representing the outcome of the request processing.
     */
    @Override
    public Response proceedRequest(Request request) {
        if (request.getType() == RequestType.EXECUTE_COMMAND) {
            lastResponse = executeCommand(request);
            return lastResponse;
        }

        return new Response(getId(), ResponseType.SUCCESS, PrintType.WARNING, "Not correct request type");
    }


    /**
     * The Factory class provides methods to create instances of the Help command
     * and describe its functionality.
     */
    public static class Factory implements ICommandFactory {
        
        /**
         * Creates a new instance of the Help command.
         *
         * @param id               The unique identifier for the command.
         * @param arguments        The initial arguments provided to the command.
         * @param commandControl   The {@link CommandControl} instance for managing commands.
         * @param collectionControl The {@link CollectionControl} instance (unused in this implementation).
         * @return A new instance of the Help command.
         */
        @Override
        public ICommand create(int id, String arguments, CommandControl commandControl, CollectionControl collectionControl, Request request) {
            return new Help(id, arguments, commandControl, collectionControl);
        }

        /**
         * Returns a brief description of the Help command.
         *
         * @return A short description of the command functionality.
         */
        @Override
        public String getDescription() {
            return "help [command]: вывести справку по доступным командам";
        }

        /**
         * Returns an extended description of the Help command, detailing its input requirements.
         *
         * @return A detailed description of the command functionality.
         */
        @Override
        public String getExtendedDescription() {
            return "help: вывести справку по доступным командам.\nhelp command: вывести расширенную справку по команде command.";
        }
    }
}
